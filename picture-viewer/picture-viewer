#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  target_viewer=""
  in_files=()
  image_type=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    'cat' \
    'coreutils'
  if [[ "${_os}" == "Android" ]]; then
    _check_cmd \
      'termux-open' \
      'termux-tools'
  fi
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_picture_viewer() {
  local \
    _target_viewer="${1}" \
    _image_type="${1}" \
    _in=()
  shift \
    1
  _in+=(
    "$@"
  )
  "_${_viewer}" \
    "${_in[@]}"
}

_image_type_auto_detect(){
  local \
    _type
  _type="raw"
  if [ ! -n "in_files" ] &&  \
     [[ "${in_files}" == *".txt" ]]; then
    _type="text"
  fi
  echo \
    "${_type}"
}

_viewer_auto_detect(){
  local \
    _os \
    _viewer
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _viewer="termux-open"
  else
    _viewer="xdg-open"
  fi
  if [[ "${image_type}" == "text" ]]; then
    _viewer="cat"
  fi
  echo \
    "${_viewer}"
}

_set_overrides() {
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "image" \
    "type" \
    "$(_image_type_auto_detect)"
  _set_override \
    "target" \
    "viewer" \
    "$(_viewer_auto_detect)"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Cross-platform picture viewer.

Usage:
  $(_get "app" "name")
    [options]
    [in_file]
  options:
     -i <image_type>      It can be 'raw' or 'text'
                          Default: '$(_get "image" "type")'
     -p <target_viewer>   Use a specific viewer
                          ('cacaview', 'termux-open',
                          'xdg-open')
                          Default: '$(_get "target" "viewer")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
  _msg_info "               Image type:   $(_get "image" "type")"
  _msg_info "            Target viewer:   $(_get "target" "viewer")"
  _msg_info "                 In files:   ${in_files[*]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'i:p:cvh?' \
    arg; do
  case \
    "${arg}" in
    i) override_image_type="${OPTARG}" ;;
    p) override_target_viewer="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
in_files+=(
  "$@"
)
if [[ "${in_files[*]}" ==  "" ]]; then
  _msg_error \
    "no files given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "target" \
       "viewer")"
  "$(_get \
       "image" \
       "type")"
  "${in_files[@]}"
)
_picture_viewer \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
